/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.ema.tp1;

import org.junit.Test;
import org.ema.tp1.client.ProxyPhotoClient;
import org.ema.tp1.serveur.ProxyPhotoServeur;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class AppTest {
    @Test
    public void tux() {
        IPhoto photo = new ProxyPhoto();
        int w = photo.width();
        assertEquals(w, 10);
    }

    @Test
    public void client() throws IOException {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
        context.register(ConfigurationMock.class);
        context.refresh();

        ProxyPhotoClient client = (ProxyPhotoClient) context.getBean(ProxyPhotoClient.class);

        int width = client.width();

        Socket socket = (Socket) context.getBean(Socket.class);

        String envoye = ((ByteArrayOutputStream) socket.getOutputStream()).toString();

        assertEquals(envoye, "width");
        assertEquals(width, 10);
    }

    @Test
    public void serveur() throws IOException {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
        context.register(ConfigurationMock.class);
        context.refresh();

        ProxyPhotoServeur serveur = (ProxyPhotoServeur) context.getBean(ProxyPhotoServeur.class);

        serveur.run();

        Socket socket = (Socket) context.getBean(Socket.class);
        String envoye = ((ByteArrayOutputStream) socket.getOutputStream()).toString();
        assertEquals(envoye, "10");
    }

    @Test
    public void integration() throws InterruptedException, IOException {
        ServerSocket socketServeur = new ServerSocket(8888);
        Socket socket = new Socket("localhost", 8888);
        ProxyPhotoServeur serveur = new ProxyPhotoServeur(socketServeur);
        serveur.start();

        Thread.sleep(200);

        IPhoto photo = new ProxyPhotoClient(socket);
        int w = photo.width();
        assertEquals(w, 10);

    }
}
